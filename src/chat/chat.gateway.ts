/* eslint-disable @typescript-eslint/no-unused-vars */
import {
	OnGatewayConnection,
	OnGatewayDisconnect,
	SubscribeMessage,
	WebSocketGateway,
	WebSocketServer
} from '@nestjs/websockets'
import { Server, Socket } from 'socket.io'
import { PrismaService } from 'src/prisma.service'

@WebSocketGateway(4501, { cors: { origin: '*' } })
export class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {
	@WebSocketServer() server: Server
	private onlineUsers = new Map<string, string>() //Map<userId, socketId>

	constructor(private readonly prisma: PrismaService) {}

	handleConnection(client: Socket) {
		console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç: ${client.id}`)
		const userId = client.handshake.query.userId as string
		if (userId) {
			this.onlineUsers.set(userId, client.id)
			this.server.emit('userOnline', userId)
		}
	}

	handleDisconnect(client: Socket) {
		console.log(`‚ùå –û—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç: ${client.id}`)
		const userId = [...this.onlineUsers.entries()].find(
			([_, socketId]) => socketId === client.id
		)?.[0]
		if (userId) {
			this.onlineUsers.delete(userId)
			this.server.emit('userOffline', userId)
		}
	}

	@SubscribeMessage('sendMessage')
	async handleMessage(client: Socket, payload: any) {
		console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, payload)

		// –ï—Å–ª–∏ payload –ø—Ä–∏—à—ë–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞—Ä—Å–∏–º JSON
		if (typeof payload === 'string') {
			try {
				payload = JSON.parse(payload)
			} catch (e) {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON`, payload)
				client.emit('error', { message: '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö' })
				return
			}
		}

		// –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º, –∞ –Ω–µ –º–∞—Å—Å–∏–≤–æ–º
		if (typeof payload !== 'object' || payload === null) {
			console.error(`‚ùå –û—à–∏–±–∫–∞: payload –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º!`, payload)
			client.emit('error', { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' })
			return
		}

		const { senderId, chatId, message } = payload

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
		if (!senderId || !chatId || !message) {
			console.error(`‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ!`, payload)
			client.emit('error', { message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' })
			return
		}

		try {
			const sender = await this.prisma.user.findUnique({
				where: { id: senderId }
			})

			if (!sender) {
				console.error(`‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${senderId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`)
				client.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
				return
			}

			// üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
			let chat = await this.prisma.chat.findUnique({
				where: { id: chatId }
			})

			if (!chat) {
				console.log(`‚ÑπÔ∏è –ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π`)
				chat = await this.prisma.chat.create({
					data: { id: chatId, isGroup: false }
				})
			}

			// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
			const newMessage = await this.prisma.message.create({
				data: {
					chatId: chat.id,
					senderId: sender.id,
					encryptedText: message, // –ü–æ–∫–∞ –Ω–µ —à–∏—Ñ—Ä—É–µ–º
					encryptedKey: '' // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
				}
			})

			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º
			this.server.to(chatId).emit('newMessage', newMessage)
			console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`)
		} catch (error) {
			console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:`, error)
			client.emit('error', { message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è' })
		}
	}
}
